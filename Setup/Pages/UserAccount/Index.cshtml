@page "{id:int?}"
@model Setup.Pages.UserAccount.IndexModel

@{
    ViewData["Title"] = "UserAccount";
}

<h1>List of Users</h1>


<form asp-page="./Index" method="get">
    <div class="form-actions no-color">
        <p>
            UserName:
            <input type="text" name="SearchString" value="@Model.CurrentFilter" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-page="./Index">Back to full List</a>
        </p>
    </div>
</form>


<p>
    <a asp-page="Create">Create New</a>
</p>
<table class="table">
    <thead>
        <tr>
            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Account[0].FirstName)
                </a>
            </th>


            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Account[0].LastName)
                </a>
            </th>

            <th>
                @Html.DisplayNameFor(model => model.Account[0].CompanyName)
            </th>

            <th>
                <a asp-page="./Index" asp-route-sortOrder="@Model.NameSort"
                   asp-route-currentFilter="@Model.CurrentFilter">
                    @Html.DisplayNameFor(model => model.Account[0].UserName)
                </a>
            </th>

            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model.Account)
        {
            string selectedRow = "";
            if (item.AccountID == Model.AccountID)
            {
                selectedRow = "success";
            }

        <tr class="@selectedRow">
            <td>
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CompanyName)
            </td>

            <td>
                @Html.DisplayFor(modelItem => item.UserName)
            </td>

        
          


            <td>
                <a asp-page="./Index" asp-route-id="@item.AccountID">Select</a> |
                <a asp-page="./Edit" asp-route-id="@item.AccountID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.AccountID">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.AccountID">Delete</a>
            </td>
        </tr>
        }
    </tbody>
</table>


@{
    var prevDisabled = !Model.Account.HasNextPage ? "disabled" : "";
    var nextDisabled = !Model.Account.HasNextPage ? "disabled" : "";
}

<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Account.PageIndex - 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-page="./Index"
   asp-route-sortOrder="@Model.CurrentSort"
   asp-route-pageIndex="@(Model.Account.PageIndex + 1)"
   asp-route-currentFilter="@Model.CurrentFilter"
   class="btn btn-default @nextDisabled">
    Next
</a>

@if (Model.Accounts.Places != null)
{
    <h3>Places related to this account</h3>
    <table class="table">
        <tr>
            <th>Place Name</th>
            <th>Address</th>
            <th>License Number</th>
          
        </tr>

        @foreach (var item in Model.Accounts.Places)
        {
        
    <tr>

        <td>
            @item.PlaceName
        </td>
        <td>
            @item.Address
        </td>
        <td>
            @item.License
        </td>
        
    </tr>
        }

    </table>
}